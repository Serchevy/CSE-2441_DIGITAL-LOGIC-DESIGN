
module FAbehav (
	input ai, bi, cini,
	output reg si, couti);
	always @ (ai,bi,cini)
		case ({ai,bi,cini})
			3'b000: begin couti = 1'b0; si = 1'b0; end
			3'b001: begin couti = 1'b0; si = 1'b1; end
			3'b010: begin couti = 1'b0; si = 1'b1; end
			3'b011: begin couti = 1'b1; si = 1'b0; end
			3'b100: begin couti = 1'b0; si = 1'b1; end
			3'b101: begin couti = 1'b1; si = 1'b0; end
			3'b110: begin couti = 1'b1; si = 1'b0; end
			3'b111: begin couti = 1'b1; si = 1'b1; end
		endcase
endmodule // Full Adder Behavioral Model

FAbehav FAbehav_inst
(
			.ai(ai_sig) , 		// input  ai_sig
			.bi(bi_sig) , 		// input  bi_sig
			.cini(cini_sig) , // input  
	cini_sig
			.si(si_sig) , 		// output  si_sig
			.couti(couti_sig) // output  
	couti_sig
);


module RippleCarryAdderStructural (    
	input [3:0] A, B, 					
	output [3:0] S, 
	output Cout); 
		wire [4:0] C; 
		assign C[0] = 1'b0; 				//assign 0 to least significant carry-in
		assign Cout = C[4]; 				//rename carry-out port
		
	//instantiate the full adder module for each stage of the ripple carry adder
	FAbehav s0 (.ai(A[0]), .bi(B[0]), .cini(C[0]), .si(S[0]), .couti(C[1])); //stage 0
	FAbehav s1 (.ai(A[1]), .bi(B[1]), .cini(C[1]), .si(S[1]), .couti(C[2])); //stage 1
	FAbehav s2 (.ai(A[2]), .bi(B[2]), .cini(C[2]), .si(S[2]), .couti(C[3])); //stage 2
	FAbehav s3 (.ai(A[3]), .bi(B[3]), .cini(C[3]), .si(S[3]), .couti(C[4])); //stage 3
endmodule 